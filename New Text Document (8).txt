import 'package:flutter/cupertino.dart';
import 'package:flutter_application_todolist/task.dart';
import 'package:flutter_application_todolist/userModel.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';


class DatabaseHelper{

  // Initialize Database Object
  static Database? _db;


  // Make Init function that will be used to identify the database object
  static void initDB() async{
    var databasesPath = await getDatabasesPath();
    String path = ("${databasesPath}notepadDB.db");

    _db = await openDatabase(path, version: 1, onOpen: (db) {
      print("Database Opened !!");
    }, onCreate: (Database db, int version) async {
      print("Database Created!!");
      await db.execute("CREATE TABLE TASKDATA (id INTEGER PRIMARY KEY, title TEXT, priority TEXT,discription text, endDate TEXT ,IsDone BOOLEAN)");
    });
  }

  //Insert new user
  static void   saveTask(Taskmodel task) async {
        int res = await _db!.rawInsert(
        "INSERT INTO TASKDATA (id,title,priority,discription,endDate,IsDone) VALUES (?,?,?,?,?,?)",
      [null, task.name,task.priority,task.notes,task.date,task.isDone]
      );
      print(res);
  }

  //Getting user
    static Future<Taskmodel?>gettask(int id) async {
    Taskmodel task = Taskmodel();
    var res =await  _db!.query("TASKDATA", where: "id = ?", whereArgs: [id]);
    if(res.isNotEmpty){
      task.id=res.first["userid"] as int;
      task.name = res.first["title"] as String;
      task.priority = res.first["priority"] as String;
      task.notes = res.first["discription"] as String;
      task.date = res.first["endDate"] as String;
      task.isDone = res.first["IsDone"] as bool;
      return task;
    }
    return null;
  }

 //Update user
        static void updatetaskinformation(Taskmodel task)  async {
        var res =await  _db!.update("TASKDATA",{'title':task.name,'discription':task.notes}, where: "id = ?", whereArgs: [task.id]);
  }

  //Delete user
    static void deletetask(int id) async {
        var res =await  _db!.delete("TASKDATA",where: "id = ?", whereArgs: [id]);
  }
  closeDB() async =>await _db!.close();

}