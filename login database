class User {
  int _id;
  String _email;
  String _password;
  User(this._email, this._password);
  User.fromMap(dynamic obj) {
    this._email = obj['email'];
    this._password = obj['password'];
  }
  String get username => _email;
  String get password => _password;
  Map<String, dynamic> toMap() {
    var map = new Map<String, dynamic>();
    map["email"] = _email;
    map["password"] = _password;
    return map;
  }
}



....................................................................................................................................

import 'package:flutter/material.dart';

import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/services.dart';

import 'package:path/path.dart';
import 'dart:async';

class DatabaseHelper {
  static final DatabaseHelper _instance = new DatabaseHelper.internal();
  factory DatabaseHelper() => _instance;
  static Database _db;
  Future<Database> get db async {
    if (_db != null) {
      return _db;
    }
    _db = await initDb();
    return _db;
  }
  DatabaseHelper.internal();
  initDb() async {
    Directory documentDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentDirectory.path, "data_flutter.db");
    
    // Only copy if the database doesn't exist
    //if (FileSystemEntity.typeSync(path) == FileSystemEntityType.notFound){
      // Load database from asset and copy
      ByteData data = await rootBundle.load(join('data', 'flutter.db'));
      List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
      // Save copied asset to documents
      await new File(path).writeAsBytes(bytes);
    //}
    var ourDb = await openDatabase(path);
    return ourDb;
  }
}
................................................................................................................................

import 'dart:async';

import 'package:sqlflite/user.dart';

import 'Db_Helper.dart';
class LoginCtr {
DatabaseHelper con = new DatabaseHelper();
//insertion
  Future<int> saveUser(User user) async {
    var dbClient = await con.db;
    int res = await dbClient.insert("User", user.toMap());
    return res;
  }
  //deletion
  Future<int> deleteUser(User user) async {
    var dbClient = await con.db;
    int res = await dbClient.delete("User");
    return res;
  }
  Future<User?> getLogin(String user, String password) async {
    var dbClient = await con.db;
    var res = await dbClient.rawQuery("SELECT * FROM user WHERE email= '$email' and password = '$password'");
    
    if (res.length > 0) {
      return new User.fromMap(res.first);
    }
    return null;
  }
  Future<List<User>> getAllUser() async {
    var dbClient = await con.db;
    var res = await dbClient.query("user");
    
    List<User> list =
        res.isNotEmpty ? res.map((c) => User.fromMap(c)).toList() : null;
    return list;
  }
}
..................................................................................................................................


import 'package:flutter/material.dart';

import 'package:login/models/user.dart';
import 'package:sqlflite/user.dart';
abstract class LoginCallBack {
  void onLoginSuccess(User user);
  void onLoginError(String error);
}
class LoginResponse {
  LoginCallBack _callBack;
  LoginRequest loginRequest = new LoginRequest();
  LoginResponse(this._callBack);
  doLogin(String username, String password) {
    loginRequest
        .getLogin(username, password)
        .then((user) => _callBack.onLoginSuccess(user))
        .catchError((onError) => _callBack.onLoginError(onError.toString()));
  } 
}
...............................................................................


import 'dart:async';
import 'package:sqlflite/loginctr.dart';
class LoginRequest {
  LoginCtr con = new LoginCtr();
 Future<User> getLogin(String username, String password) {
    var result = con.getLogin(username,password);
    return result;
  }
}
......................................................................
void onLoginError(String error) {
    // TODO: implement onLoginError
    _showSnackBar(error);
    setState(() {
      _isLoading = false;
    });
  }
  @override
  void onLoginSuccess(User user) async {    
    if(user != null){
      Navigator.of(context).pushNamed("/home");
    }else{
      // TODO: implement onLoginSuccess
    _showSnackBar("Login sucess");
    setState(() {
      _isLoading = false;
    });
    }
    
  }
}

in login page
